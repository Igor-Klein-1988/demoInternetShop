 Работа с товарами:
 - передать все товары:
 Method: GET
 URL: /products
 Request:-
 Response:
 [
     {
        "id": 1,
        "name": "iPhone 15",
        "description": "iPhone 15 ....",
        "category": { "id" : 1,
                     "categoryName": "phones"}
        "manufacturer": {"id" : 1,
                        "name": "Apple",
                        "country": "China"}
        "productPrice": 1500,
        "productQuantity": 24
        }
     },
     {}
 ]


 - передать список категорий
  Method: GET
  URL: /products/category
  Request: -
  Response:
   [
       { "id" : 1,
         "categoryName": "phones"},
       {}
   ]

       Method: GET
        URL: /products/category
        @GetMapping(/products/category)
        public List<СategoryDTO> getCategories()




   - передать товары по категории
   - передать товары по категории и диапазону цен

     Method: GET
     URL: /products/category/{category_id}
     @GetMapping(/products/category/{category_id})
     public List<ProductResponseDTO> getProducts=ByCategoryAndPrice(@PathVariable("category_id") Integer categoryId,
                                                                    @RequestParam(defaultValue = "0") Double minPrice,
                                                                    @RequestParam(defaultValue = "Double.MAX_VALUE") Double maxPrice) {}

     Request: -
     Response:
      [
          {
                  "id": 1,
                  "name": "iPhone 15",
                  "description": "iPhone 15 ....",
                  "manufacturer": {"id" : 1,
                                  "name": "Apple",
                                  "country": "China"}
                  "productPrice": 1500,
                  "productQuantity": 24
                  },
          {}
      ]

- передать список производителей
  Method: GET
  URL: /products/manufacturer
  Request: -
  Response:
   [
    {"id" : 1,
     "name": "Apple",
     "country": "China"},
     {}
   ]

     Method: GET
        URL: /products/manufacturer
        @GetMapping(/products/manufacturer)
        public List<ManufacturerDto> getManufacturers()



 - передать товары по категории и по производителю
 - передать товары по категории и по производителю и по цене
  Method: GET
  URL: /products/category_manufacturer_price

       @GetMapping(/products/category/{category_id}/manufacturer/{manufacturer_id}/price)
       public List<ProductShortResponseDto> getProducts=ByCategoryAndPrice(@PathVariable("category_id") Integer categoryId,
                                                                      @PathVariable("manufacturer_id") Integer manufacturerId                                                                      @RequestParam(defaultValue = "0") Double minPrice,
                                                                      @RequestParam(defaultValue = "Double.MAX_VALUE") Double maxPrice) {}

  Request:
  Response:
 [
          {
                  "id": 1,
                  "name": "iPhone 15",
                  "description": "iPhone 15 ....",
                  "productPrice": 1500,
                  "productQuantity": 24
                  },
          {}
      ]

 - передать данные о количестве конкретного товара
  Method: GET
  URL: /products/product_quantity/{product_id}
  Request:-
  Response:
 {
    "quantity":
 }

      @GetMapping(/products/product_quantity/{product_id})
        public Integer getProductQuantity(@PathVariable("product_id") Integer productId)



 - показать конкретный товар по id
  Method: GET
  URL: /products/product/{product_id}
  Request:-
  Response:
 {
         "id": 1,
         "name": "iPhone 15",
         "description": "iPhone 15 ....",
         "category": { "id" : 1,
                      "categoryName": "phones"}
         "manufacturer": {"id" : 1,
                         "name": "Apple",
                         "country": "China"}
         "productPrice": 1500,
         "productQuantity": 24
         }


      @GetMapping(/products/{product_id})
        public ProductDto getProduct(@PathVariable("product_id") Integer productId)



         =========================================================================

 Работа с пользователем:
 - регистрация
Method: POST
URL: /users/registration
Request:
{
    "username":"Igor123"
    "password": "Qwerty007!"
    "email": "user@mail.com"
    "phone": "+1234567890"
}
    @PostMapping("api/users/register")
    public UserDto register(UserRegistrationDto request) {
        return userService.createUser(request);
    }

Response:
{
  "id": 1,
  "username": "Igor123"
  "role": "admin"
  "email": "user@mail.com"
  "phone": "+1234567890"
}

 - авторизация
 Method: PUT
 URL: /users/autorisation/{user_id}
 Request:
 {
     "username": "Igor123"
     "password": "Qwerty007!"
 }
 public void authenticateUser(@RequestBody LoginRequestDto loginRequest) {


 - редактирование данных
  Method: PUT
  URL: /users/{user_id}
  Request:
  {
      "username": "Igor123"
      "role": "admin"
      "email": "user@mail.com"
      "phone": "+1234567890"
  }

      @PutMapping("/api/users/{userId}")
      public UserDto updateUser(UserUpdateDto request, Integer userId) {
          return userService.updateUser(userId, request);
      }


 Response:
 {
   "id": 1
   "username": "Igor123"
   "role": "admin"
   "email": "user@mail.com"
   "phone": "+1234567890"
 }


 =========================================================================
 Работа с заказами:
 - показать информацию по корзине пользователя
Method: GET
URL: /carts/{cart_id}
Request: -
      @GetMapping(api/carts/{cart_id})
        public CartDto getProduct(@PathVariable("cart_id") Integer cartId)

Response:
{
    "id": ,
    "userId": 1,
    products: [
                    {
                        "id": 1,
                        "name": "iPhone 15",
                        "price": 150.50
                        "quantity": 2
                    },
                    {}
               ]
}
 - внести изменения в корзину
 Method: GET
       @GetMapping(api/carts/addProduct/{product_id})
         public CartDto getProduct(@PathVariable("product_id") Integer productId)

 Response:
{
    "id": ,
    "userId": 1,
    products: [
                    {
                        "id": 1,
                        "name": "iPhone 15",
                        "price": 150.50
                        "quantity": 2
                    },
                    {}
               ]
}

 Method: GET
       @GetMapping(api/carts/deleteProduct/{product_id})
         public CartDto getProduct(@PathVariable("product_id") Integer productId)

 Response:
{
    "id": ,
    "userId": 1,
    products: [
                    {
                        "id": 1,
                        "name": "iPhone 15",
                        "price": 150.50
                        "quantity": 2
                    },
                    {}
               ]
}


 - оформить заказ (т.е. сформировать заказ и перенести туда товары из корзины, очистить корзину,
 внести изменения в количество товара на складе в зарезервированные)
  Method: Get
  URL: api/orders/registration/{cart_id}
     @GetMapping(api/orders/registration/{cart_id})
           public OrderDto createOrder(@PathVariable("cart_id"))

  Response:

    {
    "id": 1,
    "product_id": 1
    products: [
                        {
                            "id": 1,
                            "name": "iPhone 15",
                            "price": 150.50
                            "quantity": 2
                        },
                        {}
                   ]
    "order_status":
    "payment_status":
    "payment_method":
    "create_date"
    "user":  {
               "id": 1
               "username": "Igor123"
               "role": "admin"
               "email": "user@mail.com"
               "phone": "+1234567890"
             }
    },


 - отмена заказа (по запросу пользователя)
Method: Delete
  URL: api/orders/{order_id}
     @GetMapping(api/orders/{order_id})
           public void deleteOrder(@PathVariable("order_id"))

Response:-

 - передать список всех заказов пользователя
  Method: GET
  URL: api/users/{user_id}/orders
       @GetMapping(api/orders/registration/{user_id})
             public List<OrderDto> getAllOrders(@PathVariable("user_id"))

  Request: -
  Response: [{OrderDto}, {OrderDto}]
 - передать информацию о конкретном заказе
   Method: GET
   URL: api/orders/order_id
        @GetMapping(api/orders/{order_id})
              public OrderDto getOrderById(@PathVariable("order_id"))

   Request: -
   Response: OrderDto

}
